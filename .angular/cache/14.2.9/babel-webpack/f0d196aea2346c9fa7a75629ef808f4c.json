{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/persona/persona.service\";\nexport let EmpleadosComponent = /*#__PURE__*/(() => {\n  class EmpleadosComponent {\n    constructor(reactiveFormsModule, fb, personaService) {\n      this.reactiveFormsModule = reactiveFormsModule;\n      this.fb = fb;\n      this.personaService = personaService;\n      this.listaPersonas = [];\n      this.personaList = {\n        id: '',\n        nombre: '',\n        apellidoPaterno: '',\n        apellidoMaterno: '',\n        puesto: '',\n        rfc: '',\n        direccion: '',\n        correoElectronico: '',\n        cuentaGithub: '',\n        estado: '',\n        ciudad: '',\n        numero1: '',\n        numero2: '',\n        genero: '',\n        password: '',\n        rol: ''\n      };\n      this.show = true;\n      this.value = \"\";\n      this.edit = false;\n    }\n\n    ngOnInit() {\n      this.personaForm = this.fb.group({\n        id: [''],\n        nombre: ['', Validators.required],\n        apellidoPaterno: ['', Validators.required],\n        apellidoMaterno: ['', Validators.required],\n        puesto: ['', Validators.required],\n        rfc: ['', Validators.required],\n        direccion: ['', Validators.required],\n        correoElectronico: ['', Validators.required],\n        cuentaGithub: ['', Validators.required],\n        estado: ['', Validators.required],\n        ciudad: ['', Validators.required],\n        numero1: ['', Validators.required],\n        numero2: ['', Validators.required],\n        genero: ['', Validators.required],\n        password: ['', Validators.required],\n        rol: ['', Validators.required]\n      });\n      ;\n      this.personaService.getAllPersonas().subscribe(resp => {\n        this.personas = resp;\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    deletModal(persona) {\n      Swal.fire({\n        title: '¿ELIMINAR?',\n        text: \"¿Está seguro de que desea eliminar a esta persona?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: 'Cancelar',\n        confirmButtonText: 'Eliminar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.eliminar(persona);\n          Swal.fire('Eliminado!', 'Se ha eliminado satisfactoriamente.', 'success');\n        }\n      });\n    }\n\n    confirmModal() {\n      Swal.fire({\n        title: '¿GUARDAR?',\n        text: \"¿Está seguro de que desea guardar?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: 'Cancelar',\n        confirmButtonText: 'Guardar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.validar();\n          Swal.fire('Guardado!', 'Se ha guardado satisfactoriamente.', 'success');\n        }\n      });\n    }\n\n    mostrar() {\n      this.personaService.getAllPersonas().subscribe(resp => {\n        this.personas = resp;\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    guardar() {\n      this.personaService.savePersona(this.personaForm.value).subscribe(resp => {\n        this.personaForm.reset();\n        this.personas = this.personas.filter(persona => resp.id !== persona.id);\n        this.personas.push(resp);\n        this.mostrar();\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    eliminar(persona) {\n      this.personaService.deletePersona(persona.id).subscribe(resp => {\n        this.mostrar();\n\n        if (resp === true) {\n          this.personas.pop();\n        }\n      });\n    }\n\n    editar(persona) {\n      this.edit = true;\n      console.log(this.edit);\n      this.personaList.id = persona.id;\n      console.log(this.personaList.id);\n      this.personaForm.setValue({\n        id: persona.id,\n        nombre: persona.nombre,\n        apellidoPaterno: persona.apellidopaterno,\n        apellidoMaterno: persona.apellidomaterno,\n        puesto: persona.puesto,\n        rfc: persona.rfc,\n        direccion: persona.direccion,\n        correoElectronico: persona.correoelectronico,\n        cuentaGithub: persona.cuentagithub,\n        estado: persona.estado,\n        ciudad: persona.ciudad,\n        numero1: persona.numero1,\n        numero2: persona.numero2,\n        genero: persona.genero,\n        password: persona.password,\n        rol: persona.rol\n      });\n    }\n\n    editPersona() {\n      this.personaService.editPersona(this.personaList.id, this.personaForm.value).subscribe(resp => {\n        this.personaForm.reset();\n        this.mostrar();\n        console.log(resp);\n      }, err => console.error(err));\n    }\n\n    validar() {\n      if (this.edit == true) {\n        this.editPersona();\n      } else {\n        this.guardar();\n      }\n    }\n\n    agregar() {\n      this.edit = false;\n      console.log(this.edit);\n      this.personaForm.reset();\n    }\n\n    rol() {\n      if (this.userRol = 'Super Administrador') {}\n\n      if (this.userRol = 'Administrador') {}\n\n      if (this.userRol = 'Empleado') {}\n    }\n\n  }\n\n  EmpleadosComponent.ɵfac = function EmpleadosComponent_Factory(t) {\n    return new (t || EmpleadosComponent)(i0.ɵɵdirectiveInject(i1.ReactiveFormsModule), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PersonaService));\n  };\n\n  EmpleadosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmpleadosComponent,\n    selectors: [[\"app-empleados\"]],\n    decls: 0,\n    vars: 0,\n    template: function EmpleadosComponent_Template(rf, ctx) {}\n  });\n  return EmpleadosComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}