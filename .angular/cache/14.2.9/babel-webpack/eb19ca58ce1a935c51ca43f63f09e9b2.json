{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./services/persona/persona.service\";\nimport * as i3 from \"@angular/router\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(fb, personaService) {\n      this.fb = fb;\n      this.personaService = personaService;\n      this.show = true;\n      this.value = \"\";\n    }\n\n    ngOnInit() {\n      this.personaForm = this.fb.group({\n        id: [''],\n        nombre: ['', Validators.required],\n        apellido: ['', Validators.required],\n        genero: ['', Validators.required]\n      });\n      ;\n      this.personaService.getAllPersonas().subscribe(resp => {\n        this.personas = resp;\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    deletModal(persona) {\n      Swal.fire({\n        title: '¿ELIMINAR?',\n        text: \"¿Está seguro de que desea eliminar a esta persona?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: 'Cancelar',\n        confirmButtonText: 'Eliminar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.eliminar(persona);\n          Swal.fire('Eliminado!', 'Se ha eliminado satisfactoriamente.', 'success');\n        }\n      });\n    }\n\n    confirmModal() {\n      Swal.fire({\n        title: '¿GUARDAR?',\n        text: \"¿Está seguro de que desea guardar?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: 'Cancelar',\n        confirmButtonText: 'Guardar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.guardar();\n          Swal.fire('Guardado!', 'Se ha guardado satisfactoriamente.', 'success');\n        }\n      });\n    }\n\n    mostrar() {\n      this.personaService.getAllPersonas().subscribe(resp => {\n        this.personas = resp;\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    guardar() {\n      this.personaService.savePersona(this.personaForm.value).subscribe(resp => {\n        this.personaForm.reset();\n        this.personas = this.personas.filter(persona => resp.id !== persona.id);\n        this.personas.push(resp);\n        this.mostrar();\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    eliminar(persona) {\n      this.personaService.deletePersona(persona.id).subscribe(resp => {\n        this.mostrar();\n\n        if (resp === true) {\n          this.personas.pop();\n        }\n      });\n    }\n\n    editar(persona) {\n      this.personaForm.setValue({\n        id: persona.id,\n        nombre: persona.nombre,\n        apellido: persona.apellido,\n        genero: persona.genero\n      });\n    }\n\n    agregar() {\n      this.personaForm.reset();\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PersonaService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 1,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"router-outlet\");\n      }\n    },\n    dependencies: [i3.RouterOutlet]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}